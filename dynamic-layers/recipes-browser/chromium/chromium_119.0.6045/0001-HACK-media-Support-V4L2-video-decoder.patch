From 2c26fc59af08284d2cb6f6947dd3887921dbb4b2 Mon Sep 17 00:00:00 2001
From: Jeffy Chen <jeffy.chen@rock-chips.com>
Date: Thu, 14 Dec 2023 10:00:22 +0800
Subject: [PATCH 01/17] HACK: media: Support V4L2 video decoder

Tested on RK3588 EVB with:
1/ Install libmali, v4l-rkmpp, mpp and custom v4l-utils.
2/ Run "echo dec > /dev/video-dec0"

Signed-off-by: Jeffy Chen <jeffy.chen@rock-chips.com>
---
 .../gpu_mjpeg_decode_accelerator_factory.cc   |  3 +-
 ...sed_gpu_memory_buffer_video_frame_utils.cc |  4 ++
 media/gpu/chromeos/fourcc.cc                  |  4 ++
 media/gpu/chromeos/fourcc.h                   | 12 ++++
 media/gpu/chromeos/image_processor_backend.cc |  2 +-
 .../chromeos/mailbox_video_frame_converter.cc |  4 +-
 media/gpu/chromeos/video_decoder_pipeline.cc  | 12 ++++
 .../gpu_video_decode_accelerator_factory.h    |  2 +
 media/gpu/v4l2/BUILD.gn                       | 65 ++++++++++---------
 .../legacy/v4l2_video_decode_accelerator.h    |  2 +-
 media/gpu/v4l2/v4l2_queue.cc                  | 46 +++++++++++++
 media/gpu/v4l2/v4l2_utils.cc                  | 28 +++++---
 media/gpu/v4l2/v4l2_utils.h                   | 20 ++++++
 media/gpu/v4l2/v4l2_vda_helpers.cc            |  2 +
 media/gpu/v4l2/v4l2_video_decoder.cc          |  2 +
 .../v4l2_video_decoder_backend_stateful.cc    |  1 +
 .../services/gpu_mojo_media_client_linux.cc   | 10 +++
 17 files changed, 176 insertions(+), 43 deletions(-)

diff --git a/components/chromeos_camera/gpu_mjpeg_decode_accelerator_factory.cc b/components/chromeos_camera/gpu_mjpeg_decode_accelerator_factory.cc
index 8e8ad4a84..a506284e3 100644
--- a/components/chromeos_camera/gpu_mjpeg_decode_accelerator_factory.cc
+++ b/components/chromeos_camera/gpu_mjpeg_decode_accelerator_factory.cc
@@ -14,7 +14,8 @@
 #include "media/base/media_switches.h"
 #include "media/gpu/buildflags.h"
 
-#if BUILDFLAG(USE_V4L2_CODEC) && defined(ARCH_CPU_ARM_FAMILY)
+#if BUILDFLAG(USE_V4L2_CODEC) && defined(ARCH_CPU_ARM_FAMILY) && \
+    BUILDFLAG(IS_CHROMEOS)
 #define USE_V4L2_MJPEG_DECODE_ACCELERATOR
 #endif
 
diff --git a/media/gpu/chromeos/chromeos_compressed_gpu_memory_buffer_video_frame_utils.cc b/media/gpu/chromeos/chromeos_compressed_gpu_memory_buffer_video_frame_utils.cc
index f4be0d8a6..279fd5614 100644
--- a/media/gpu/chromeos/chromeos_compressed_gpu_memory_buffer_video_frame_utils.cc
+++ b/media/gpu/chromeos/chromeos_compressed_gpu_memory_buffer_video_frame_utils.cc
@@ -26,6 +26,7 @@ scoped_refptr<VideoFrame> WrapChromeOSCompressedGpuMemoryBufferAsVideoFrame(
     const gfx::Size& natural_size,
     std::unique_ptr<gfx::GpuMemoryBuffer> gpu_memory_buffer,
     base::TimeDelta timestamp) {
+#ifdef I915_FORMAT_MOD_Y_TILED_GEN12_MC_CCS
   const absl::optional<VideoPixelFormat> format =
       GfxBufferFormatToVideoPixelFormat(gpu_memory_buffer->GetFormat());
   if (!format ||
@@ -89,6 +90,9 @@ scoped_refptr<VideoFrame> WrapChromeOSCompressedGpuMemoryBufferAsVideoFrame(
   }
   frame->gpu_memory_buffer_ = std::move(gpu_memory_buffer);
   return frame;
+#else
+  return nullptr;
+#endif
 }
 
 }  // namespace media
diff --git a/media/gpu/chromeos/fourcc.cc b/media/gpu/chromeos/fourcc.cc
index e141bb17a..537da4428 100644
--- a/media/gpu/chromeos/fourcc.cc
+++ b/media/gpu/chromeos/fourcc.cc
@@ -359,10 +359,14 @@ static_assert(Fourcc::NM12 == V4L2_PIX_FMT_NV12M, "Mismatch Fourcc");
 static_assert(Fourcc::NM21 == V4L2_PIX_FMT_NV21M, "Mismatch Fourcc");
 static_assert(Fourcc::YU16 == V4L2_PIX_FMT_YUV422P, "Mismatch Fourcc");
 static_assert(Fourcc::YM16 == V4L2_PIX_FMT_YUV422M, "Mismatch Fourcc");
+#if defined(V4L2_PIX_FMT_MM21) && defined(V4L2_PIX_FMT_MT21C)
 static_assert(Fourcc::MM21 == V4L2_PIX_FMT_MM21, "Mismatch Fourcc");
 static_assert(Fourcc::MT21 == V4L2_PIX_FMT_MT21C, "Mismatch Fourcc");
+#endif
 static_assert(Fourcc::AR24 == V4L2_PIX_FMT_ABGR32, "Mismatch Fourcc");
+#ifdef V4L2_PIX_FMT_P010
 static_assert(Fourcc::P010 == V4L2_PIX_FMT_P010, "Mismatch Fourcc");
+#endif
 // MT2T has not been upstreamed yet
 #ifdef V4L2_PIX_FMT_MT2T
 static_assert(Fourcc::MT2T == V4L2_PIX_FMT_MT2T, "Mismatch Fourcc");
diff --git a/media/gpu/chromeos/fourcc.h b/media/gpu/chromeos/fourcc.h
index f35d365f8..ffd6d6602 100644
--- a/media/gpu/chromeos/fourcc.h
+++ b/media/gpu/chromeos/fourcc.h
@@ -13,6 +13,18 @@
 #include "media/gpu/media_gpu_export.h"
 #include "third_party/abseil-cpp/absl/types/optional.h"
 
+#ifndef V4L2_PIX_FMT_MT21C
+#define V4L2_PIX_FMT_MT21C	v4l2_fourcc('M', 'T', '2', '1') /* Mediatek compressed block mode  */
+#endif
+
+#ifndef V4L2_PIX_FMT_VP9
+#define V4L2_PIX_FMT_VP9	v4l2_fourcc('V', 'P', '9', '0') /* VP9 */
+#endif
+
+#ifndef V4L2_PIX_FMT_HEVC
+#define V4L2_PIX_FMT_HEVC	v4l2_fourcc('H', 'E', 'V', 'C') /* HEVC */
+#endif
+
 namespace media {
 
 // Composes a Fourcc value.
diff --git a/media/gpu/chromeos/image_processor_backend.cc b/media/gpu/chromeos/image_processor_backend.cc
index 19059cab1..aac3f43d2 100644
--- a/media/gpu/chromeos/image_processor_backend.cc
+++ b/media/gpu/chromeos/image_processor_backend.cc
@@ -34,7 +34,7 @@ std::string VectorToString(const std::vector<T>& vec) {
 
 }  // namespace
 
-ImageProcessorBackend::PortConfig::PortConfig() = default;
+ImageProcessorBackend::PortConfig::PortConfig() {};
 
 ImageProcessorBackend::PortConfig::PortConfig(const PortConfig&) = default;
 
diff --git a/media/gpu/chromeos/mailbox_video_frame_converter.cc b/media/gpu/chromeos/mailbox_video_frame_converter.cc
index 21f7c73e3..abc0a690a 100644
--- a/media/gpu/chromeos/mailbox_video_frame_converter.cc
+++ b/media/gpu/chromeos/mailbox_video_frame_converter.cc
@@ -322,7 +322,9 @@ void MailboxVideoFrameConverter::ConvertFrame(scoped_refptr<VideoFrame> frame) {
   DCHECK(parent_task_runner_->RunsTasksInCurrentSequence());
   DVLOGF(4);
 
-  if (!frame || frame->storage_type() != VideoFrame::STORAGE_GPU_MEMORY_BUFFER)
+  if (!frame ||
+      (frame->storage_type() != VideoFrame::STORAGE_GPU_MEMORY_BUFFER &&
+       frame->storage_type() != VideoFrame::STORAGE_DMABUFS))
     return OnError(FROM_HERE, "Invalid frame.");
 
   VideoFrame* origin_frame =
diff --git a/media/gpu/chromeos/video_decoder_pipeline.cc b/media/gpu/chromeos/video_decoder_pipeline.cc
index f4e5594a9..8e2adf958 100644
--- a/media/gpu/chromeos/video_decoder_pipeline.cc
+++ b/media/gpu/chromeos/video_decoder_pipeline.cc
@@ -223,8 +223,12 @@ std::unique_ptr<VideoDecoder> VideoDecoderPipeline::Create(
     create_decoder_function_cb = base::BindOnce(&VaapiVideoDecoder::Create);
 #elif BUILDFLAG(USE_V4L2_CODEC)
     if (base::FeatureList::IsEnabled(kV4L2FlatStatelessVideoDecoder)) {
+#if BUILDFLAG(IS_CHROMEOS)
       create_decoder_function_cb =
           base::BindOnce(&V4L2StatelessVideoDecoder::Create);
+#else
+    return nullptr;
+#endif
     } else if (base::FeatureList::IsEnabled(kV4L2FlatStatefulVideoDecoder)) {
       create_decoder_function_cb =
           base::BindOnce(&V4L2StatefulVideoDecoder::Create);
@@ -255,8 +259,12 @@ std::unique_ptr<VideoDecoder> VideoDecoderPipeline::CreateForTesting(
   create_decoder_function_cb = base::BindOnce(&VaapiVideoDecoder::Create);
 #elif BUILDFLAG(USE_V4L2_CODEC)
   if (base::FeatureList::IsEnabled(kV4L2FlatStatelessVideoDecoder)) {
+#if BUILDFLAG(IS_CHROMEOS)
     create_decoder_function_cb =
         base::BindOnce(&V4L2StatelessVideoDecoder::Create);
+#else
+    return nullptr;
+#endif
   } else if (base::FeatureList::IsEnabled(kV4L2FlatStatefulVideoDecoder)) {
     create_decoder_function_cb =
         base::BindOnce(&V4L2StatefulVideoDecoder::Create);
@@ -322,7 +330,11 @@ VideoDecoderPipeline::GetSupportedConfigs(
 #elif BUILDFLAG(USE_V4L2_CODEC)
     case VideoDecoderType::kV4L2:
       if (base::FeatureList::IsEnabled(kV4L2FlatStatelessVideoDecoder)) {
+#if BUILDFLAG(IS_CHROMEOS)
         configs = V4L2StatelessVideoDecoder::GetSupportedConfigs();
+#else
+        configs = absl::nullopt;
+#endif
       } else if (base::FeatureList::IsEnabled(kV4L2FlatStatefulVideoDecoder)) {
         configs = V4L2StatefulVideoDecoder::GetSupportedConfigs();
       } else {
diff --git a/media/gpu/gpu_video_decode_accelerator_factory.h b/media/gpu/gpu_video_decode_accelerator_factory.h
index 27ed3a8c9..7c1d72de5 100644
--- a/media/gpu/gpu_video_decode_accelerator_factory.h
+++ b/media/gpu/gpu_video_decode_accelerator_factory.h
@@ -94,11 +94,13 @@ class MEDIA_GPU_EXPORT GpuVideoDecodeAcceleratorFactory {
       const gpu::GpuDriverBugWorkarounds& workarounds,
       const gpu::GpuPreferences& gpu_preferences,
       MediaLog* media_log) const;
+#if BUILDFLAG(IS_CHROMEOS)
   std::unique_ptr<VideoDecodeAccelerator> CreateV4L2SliceVDA(
       const gpu::GpuDriverBugWorkarounds& workarounds,
       const gpu::GpuPreferences& gpu_preferences,
       MediaLog* media_log) const;
 #endif
+#endif
 #if BUILDFLAG(IS_APPLE)
   std::unique_ptr<VideoDecodeAccelerator> CreateVTVDA(
       const gpu::GpuDriverBugWorkarounds& workarounds,
diff --git a/media/gpu/v4l2/BUILD.gn b/media/gpu/v4l2/BUILD.gn
index 25526faa3..5aa6d8c76 100644
--- a/media/gpu/v4l2/BUILD.gn
+++ b/media/gpu/v4l2/BUILD.gn
@@ -18,17 +18,6 @@ source_set("v4l2") {
   sources = [
     "legacy/v4l2_video_decode_accelerator.cc",
     "legacy/v4l2_video_decode_accelerator.h",
-    "stateless/device.cc",
-    "stateless/device.h",
-    "stateless/stateless_decode_surface_handler.h",
-    "stateless/stateless_device.cc",
-    "stateless/stateless_device.h",
-    "stateless/utils.cc",
-    "stateless/utils.h",
-    "stateless/v4l2_stateless_video_decoder.cc",
-    "stateless/v4l2_stateless_video_decoder.h",
-    "stateless/vp9_delegate.cc",
-    "stateless/vp9_delegate.h",
     "v4l2_decode_surface.cc",
     "v4l2_decode_surface.h",
     "v4l2_decode_surface_handler.h",
@@ -54,34 +43,48 @@ source_set("v4l2") {
     "v4l2_video_decoder_backend.h",
     "v4l2_video_decoder_backend_stateful.cc",
     "v4l2_video_decoder_backend_stateful.h",
-    "v4l2_video_decoder_backend_stateless.cc",
     "v4l2_video_decoder_backend_stateless.h",
-    "v4l2_video_decoder_delegate_h264.cc",
-    "v4l2_video_decoder_delegate_h264.h",
-    "v4l2_video_decoder_delegate_vp8.cc",
-    "v4l2_video_decoder_delegate_vp8.h",
-    "v4l2_video_decoder_delegate_vp9.cc",
-    "v4l2_video_decoder_delegate_vp9.h",
     "v4l2_vp9_helpers.cc",
     "v4l2_vp9_helpers.h",
   ]
 
-  if (enable_hevc_parser_and_hw_decoder) {
-    sources += [
-      "v4l2_video_decoder_delegate_h265.cc",
-      "v4l2_video_decoder_delegate_h265.h",
+  if (is_chromeos) {
+    sources = [
+      "stateless/device.cc",
+      "stateless/device.h",
+      "stateless/stateless_decode_surface_handler.h",
+      "stateless/stateless_device.cc",
+      "stateless/stateless_device.h",
+      "stateless/utils.cc",
+      "stateless/utils.h",
+      "stateless/v4l2_stateless_video_decoder.cc",
+      "stateless/v4l2_stateless_video_decoder.h",
+      "stateless/vp9_delegate.cc",
+      "stateless/vp9_delegate.h",
+      "v4l2_video_decoder_backend_stateless.cc",
+      "v4l2_video_decoder_delegate_h264.cc",
+      "v4l2_video_decoder_delegate_h264.h",
+      "v4l2_video_decoder_delegate_vp8.cc",
+      "v4l2_video_decoder_delegate_vp8.h",
+      "v4l2_video_decoder_delegate_vp9.cc",
+      "v4l2_video_decoder_delegate_vp9.h",
     ]
-  }
 
-  if (current_cpu == "arm" || current_cpu == "arm64") {
-    sources += [
-      "mt21/mt21_decompressor.cc",
-      "mt21/mt21_decompressor.h",
-      "mt21/mt21_util.h",
-    ]
-  }
+    if (enable_hevc_parser_and_hw_decoder) {
+      sources += [
+        "v4l2_video_decoder_delegate_h265.cc",
+        "v4l2_video_decoder_delegate_h265.h",
+      ]
+    }
+
+    if (current_cpu == "arm" || current_cpu == "arm64") {
+      sources += [
+        "mt21/mt21_decompressor.cc",
+        "mt21/mt21_decompressor.h",
+        "mt21/mt21_util.h",
+      ]
+    }
 
-  if (is_chromeos) {
     sources += [
       # AV1 delegate depends on header files only in ChromeOS SDK
       "v4l2_video_decoder_delegate_av1.cc",
diff --git a/media/gpu/v4l2/legacy/v4l2_video_decode_accelerator.h b/media/gpu/v4l2/legacy/v4l2_video_decode_accelerator.h
index c7ee85009..3458a87c9 100644
--- a/media/gpu/v4l2/legacy/v4l2_video_decode_accelerator.h
+++ b/media/gpu/v4l2/legacy/v4l2_video_decode_accelerator.h
@@ -20,7 +20,7 @@
 
 #include "build/build_config.h"
 
-#if defined(ARCH_CPU_ARM_FAMILY)
+#if defined(ARCH_CPU_ARM_FAMILY) && BUILDFLAG(IS_CHROMEOS)
 // The MT21C software decompressor is tightly coupled to the MT8173.
 // See mt21_decompressor.h
 #define SUPPORT_MT21_PIXEL_FORMAT_SOFTWARE_DECOMPRESSION
diff --git a/media/gpu/v4l2/v4l2_queue.cc b/media/gpu/v4l2/v4l2_queue.cc
index c5caac233..73862554a 100644
--- a/media/gpu/v4l2/v4l2_queue.cc
+++ b/media/gpu/v4l2/v4l2_queue.cc
@@ -1069,10 +1069,14 @@ V4L2Queue::V4L2Queue(const IoctlAsCallback& ioctl_cb,
       weak_this_factory_(this) {
   DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
 
+#if BUILDFLAG(IS_CHROMEOS)
   struct v4l2_requestbuffers reqbufs = {
       .count = 0, .type = type_, .memory = V4L2_MEMORY_MMAP};
   supports_requests_ = (ioctl_cb_.Run(VIDIOC_REQBUFS, &reqbufs) == kIoctlOk) &&
                        (reqbufs.capabilities & V4L2_BUF_CAP_SUPPORTS_REQUESTS);
+#else
+  supports_requests_ = false;
+#endif
 
   // Stateful backends for example do not support requests.
   VPLOG_IF(4, supports_requests_)
@@ -1186,6 +1190,7 @@ size_t V4L2Queue::AllocateBuffers(size_t count,
   planes_count_ = format->fmt.pix_mp.num_planes;
   DCHECK_LE(planes_count_, static_cast<size_t>(VIDEO_MAX_PLANES));
 
+#if BUILDFLAG(IS_CHROMEOS)
   const __u8 coherency = incoherent ? V4L2_MEMORY_FLAG_NON_COHERENT : 0;
   struct v4l2_requestbuffers reqbufs = {
       .count = base::checked_cast<decltype(v4l2_requestbuffers::count)>(count),
@@ -1194,6 +1199,13 @@ size_t V4L2Queue::AllocateBuffers(size_t count,
       .flags = coherency};
   DVQLOGF(3) << "Requesting " << count << " buffers ("
              << (incoherent ? "incoherent" : "coherent") << ")";
+#else
+  struct v4l2_requestbuffers reqbufs = {
+      .count = base::checked_cast<decltype(v4l2_requestbuffers::count)>(count),
+      .type = type_,
+      .memory = memory};
+  DVQLOGF(3) << "Requesting " << count << " buffers";
+#endif
 
   int ret = ioctl_cb_.Run(VIDIOC_REQBUFS, &reqbufs);
   if (ret) {
@@ -1248,9 +1260,14 @@ bool V4L2Queue::DeallocateBuffers() {
   free_buffers_ = nullptr;
 
   // Free all buffers.
+#if BUILDFLAG(IS_CHROMEOS)
   const __u8 coherency = incoherent_ ? V4L2_MEMORY_FLAG_NON_COHERENT : 0;
   struct v4l2_requestbuffers reqbufs = {
       .count = 0, .type = type_, .memory = memory_, .flags = coherency};
+#else
+  struct v4l2_requestbuffers reqbufs = {
+      .count = 0, .type = type_, .memory = memory_};
+#endif
 
   int ret = ioctl_cb_.Run(VIDIOC_REQBUFS, &reqbufs);
   if (ret) {
@@ -1606,6 +1623,8 @@ absl::optional<struct v4l2_format> V4L2Queue::SetModifierFormat(
     uint64_t modifier,
     const gfx::Size& size) {
   DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
+
+#if BUILDFLAG(IS_CHROMEOS)
   if (DRM_FORMAT_MOD_QCOM_COMPRESSED == modifier) {
     auto format = SetFormat(V4L2_PIX_FMT_QC08C, size, 0);
 
@@ -1615,6 +1634,9 @@ absl::optional<struct v4l2_format> V4L2Queue::SetModifierFormat(
     return format;
   }
   return absl::nullopt;
+#else
+  return absl::nullopt;
+#endif
 }
 
 bool V4L2Queue::SendStopCommand() {
@@ -1703,6 +1725,7 @@ bool V4L2Request::ApplyCtrls(struct v4l2_ext_controls* ctrls) {
   DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
   DCHECK_NE(ctrls, nullptr);
 
+#if BUILDFLAG(IS_CHROMEOS)
   if (!request_fd_.is_valid()) {
     VPLOGF(1) << "Invalid request";
     return false;
@@ -1712,12 +1735,16 @@ bool V4L2Request::ApplyCtrls(struct v4l2_ext_controls* ctrls) {
   ctrls->request_fd = request_fd_.get();
 
   return true;
+#else
+  return false;
+#endif
 }
 
 bool V4L2Request::ApplyQueueBuffer(struct v4l2_buffer* buffer) {
   DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
   DCHECK_NE(buffer, nullptr);
 
+#if BUILDFLAG(IS_CHROMEOS)
   if (!request_fd_.is_valid()) {
     VPLOGF(1) << "Invalid request";
     return false;
@@ -1727,11 +1754,15 @@ bool V4L2Request::ApplyQueueBuffer(struct v4l2_buffer* buffer) {
   buffer->request_fd = request_fd_.get();
 
   return true;
+#else
+  return false;
+#endif
 }
 
 bool V4L2Request::Submit() {
   DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
 
+#if BUILDFLAG(IS_CHROMEOS)
   if (!request_fd_.is_valid()) {
     VPLOGF(1) << "No valid request file descriptor to submit request.";
     return false;
@@ -1743,6 +1774,9 @@ bool V4L2Request::Submit() {
   }
 
   return true;
+#else
+  return false;
+#endif
 }
 
 bool V4L2Request::IsCompleted() {
@@ -1779,6 +1813,7 @@ bool V4L2Request::WaitForCompletion(int poll_timeout_ms) {
 bool V4L2Request::Reset() {
   DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
 
+#if BUILDFLAG(IS_CHROMEOS)
   if (!request_fd_.is_valid()) {
     VPLOGF(1) << "Invalid request";
     return false;
@@ -1792,6 +1827,9 @@ bool V4L2Request::Reset() {
   }
 
   return true;
+#else
+  return false;
+#endif
 }
 
 V4L2RequestRefBase::V4L2RequestRefBase(V4L2RequestRefBase&& req_base) {
@@ -1868,6 +1906,7 @@ V4L2RequestsQueue::~V4L2RequestsQueue() {
 absl::optional<base::ScopedFD> V4L2RequestsQueue::CreateRequestFD() {
   DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
 
+#if BUILDFLAG(IS_CHROMEOS)
   int request_fd;
   int ret = HANDLE_EINTR(
       ioctl(media_fd_.get(), MEDIA_IOC_REQUEST_ALLOC, &request_fd));
@@ -1878,11 +1917,15 @@ absl::optional<base::ScopedFD> V4L2RequestsQueue::CreateRequestFD() {
   }
 
   return base::ScopedFD(request_fd);
+#else
+  return absl::nullopt;
+#endif
 }
 
 absl::optional<V4L2RequestRef> V4L2RequestsQueue::GetFreeRequest() {
   DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
 
+#if BUILDFLAG(IS_CHROMEOS)
   V4L2Request* request_ptr =
       free_requests_.empty() ? nullptr : free_requests_.front();
   if (request_ptr && request_ptr->IsCompleted()) {
@@ -1920,6 +1963,9 @@ absl::optional<V4L2RequestRef> V4L2RequestsQueue::GetFreeRequest() {
   }
 
   return V4L2RequestRef(request_ptr);
+#else
+  return absl::nullopt;
+#endif
 }
 
 void V4L2RequestsQueue::ReturnRequest(V4L2Request* request) {
diff --git a/media/gpu/v4l2/v4l2_utils.cc b/media/gpu/v4l2/v4l2_utils.cc
index 165be2e9d..f5c4003e3 100644
--- a/media/gpu/v4l2/v4l2_utils.cc
+++ b/media/gpu/v4l2/v4l2_utils.cc
@@ -11,6 +11,19 @@
 #include "build/build_config.h"
 #if BUILDFLAG(IS_CHROMEOS)
 #include <linux/media/av1-ctrls.h>
+#else
+#ifndef V4L2_CID_MPEG_VIDEO_AV1_PROFILE
+#ifdef V4L2_CID_CODEC_BASE
+#define V4L2_CID_MPEG_VIDEO_AV1_PROFILE (V4L2_CID_CODEC_BASE + 655)
+#else
+#define V4L2_CID_MPEG_VIDEO_AV1_PROFILE (V4L2_CID_MPEG_BASE + 655)
+#endif
+enum v4l2_mpeg_video_av1_profile {
+	V4L2_MPEG_VIDEO_AV1_PROFILE_MAIN = 0,
+	V4L2_MPEG_VIDEO_AV1_PROFILE_HIGH = 1,
+	V4L2_MPEG_VIDEO_AV1_PROFILE_PROFESSIONAL = 2,
+};
+#endif
 #endif
 
 #include "base/containers/contains.h"
@@ -175,7 +188,6 @@ VideoCodecProfile V4L2ProfileToVideoCodecProfile(uint32_t v4l2_codec,
       }
       break;
 #endif
-#if BUILDFLAG(IS_CHROMEOS)
     case V4L2_CID_MPEG_VIDEO_AV1_PROFILE:
       switch (v4l2_profile) {
         case V4L2_MPEG_VIDEO_AV1_PROFILE_MAIN:
@@ -186,7 +198,6 @@ VideoCodecProfile V4L2ProfileToVideoCodecProfile(uint32_t v4l2_codec,
           return AV1PROFILE_PROFILE_PRO;
       }
       break;
-#endif
   }
   return VIDEO_CODEC_PROFILE_UNKNOWN;
 }
@@ -308,10 +319,8 @@ static const std::map<v4l2_enum_type, v4l2_enum_type>
         {V4L2_PIX_FMT_VP8_FRAME, V4L2_CID_MPEG_VIDEO_VP8_PROFILE},
         {V4L2_PIX_FMT_VP9, V4L2_CID_MPEG_VIDEO_VP9_PROFILE},
         {V4L2_PIX_FMT_VP9_FRAME, V4L2_CID_MPEG_VIDEO_VP9_PROFILE},
-#if BUILDFLAG(IS_CHROMEOS)
         {V4L2_PIX_FMT_AV1, V4L2_CID_MPEG_VIDEO_AV1_PROFILE},
         {V4L2_PIX_FMT_AV1_FRAME, V4L2_CID_MPEG_VIDEO_AV1_PROFILE},
-#endif
 };
 
 // Default VideoCodecProfiles associated to a V4L2 Codec Control ID.
@@ -328,9 +337,7 @@ static const std::map<v4l2_enum_type, std::vector<VideoCodecProfile>>
 #endif  // BUILDFLAG(ENABLE_HEVC_PARSER_AND_HW_DECODER)
         {V4L2_CID_MPEG_VIDEO_VP8_PROFILE, {VP8PROFILE_ANY}},
         {V4L2_CID_MPEG_VIDEO_VP9_PROFILE, {VP9PROFILE_PROFILE0}},
-#if BUILDFLAG(IS_CHROMEOS)
         {V4L2_CID_MPEG_VIDEO_AV1_PROFILE, {AV1PROFILE_PROFILE_MAIN}},
-#endif
 };
 
 // Correspondence from a VideoCodecProfiles to V4L2 codec described
@@ -346,10 +353,8 @@ static const std::map<VideoCodecProfile,
 #endif  // BUILDFLAG(ENABLE_HEVC_PARSER_AND_HW_DECODER)
         {VP8PROFILE_ANY, MAKE_V4L2_CODEC_PAIR(V4L2_PIX_FMT_VP8, FRAME)},
         {VP9PROFILE_PROFILE0, MAKE_V4L2_CODEC_PAIR(V4L2_PIX_FMT_VP9, FRAME)},
-#if BUILDFLAG(IS_CHROMEOS)
         {AV1PROFILE_PROFILE_MAIN,
          MAKE_V4L2_CODEC_PAIR(V4L2_PIX_FMT_AV1, FRAME)},
-#endif
 };
 
 }  // namespace
@@ -458,6 +463,13 @@ uint32_t VideoCodecProfileToV4L2PixFmt(VideoCodecProfile profile,
   CHECK(base::Contains(kVideoCodecProfileToV4L2CodecPixFmt, profile))
       << "Unsupported profile: " << GetProfileName(profile);
 
+#if !BUILDFLAG(IS_CHROMEOS)
+  if (slice_based) {
+    LOG(ERROR) << "Slice is not supported";
+    return 0;
+  }
+#endif
+
   const auto& v4l2_pix_fmt = kVideoCodecProfileToV4L2CodecPixFmt.at(profile);
   return slice_based ? v4l2_pix_fmt.first : v4l2_pix_fmt.second;
 }
diff --git a/media/gpu/v4l2/v4l2_utils.h b/media/gpu/v4l2/v4l2_utils.h
index 76606e714..a96239469 100644
--- a/media/gpu/v4l2/v4l2_utils.h
+++ b/media/gpu/v4l2/v4l2_utils.h
@@ -27,6 +27,26 @@
 #define V4L2_PIX_FMT_INVALID v4l2_fourcc('0', '0', '0', '0')
 #endif
 
+#ifndef V4L2_PIX_FMT_H264_SLICE
+#define V4L2_PIX_FMT_H264_SLICE v4l2_fourcc('S', '2', '6', '4')
+#endif
+
+#ifndef V4L2_PIX_FMT_HEVC_SLICE
+#define V4L2_PIX_FMT_HEVC_SLICE v4l2_fourcc('S', '2', '6', '5')
+#endif
+
+#ifndef V4L2_PIX_FMT_VP8_FRAME
+#define V4L2_PIX_FMT_VP8_FRAME v4l2_fourcc('V', 'P', '8', 'F')
+#endif
+
+#ifndef V4L2_PIX_FMT_VP9_FRAME
+#define V4L2_PIX_FMT_VP9_FRAME v4l2_fourcc('V', 'P', '9', 'F')
+#endif
+
+#ifndef V4L2_PIX_FMT_AV1_FRAME
+#define V4L2_PIX_FMT_AV1_FRAME v4l2_fourcc('A', 'V', '1', 'F')
+#endif
+
 namespace gfx {
 class Size;
 }
diff --git a/media/gpu/v4l2/v4l2_vda_helpers.cc b/media/gpu/v4l2/v4l2_vda_helpers.cc
index ee0dd6d89..f85fb4d15 100644
--- a/media/gpu/v4l2/v4l2_vda_helpers.cc
+++ b/media/gpu/v4l2/v4l2_vda_helpers.cc
@@ -158,6 +158,8 @@ InputBufferFragmentSplitter::CreateFromProfile(
       return std::make_unique<
           v4l2_vda_helpers::HEVCInputBufferFragmentSplitter>();
 #endif  // BUILDFLAG(ENABLE_HEVC_PARSER_AND_HW_DECODER)
+    case VideoCodec::kAV1:
+      // HACK: Use the default implementation for AV1.
     case VideoCodec::kVP8:
     case VideoCodec::kVP9:
       // VP8/VP9 don't need any frame splitting, use the default implementation.
diff --git a/media/gpu/v4l2/v4l2_video_decoder.cc b/media/gpu/v4l2/v4l2_video_decoder.cc
index 1754f3c98..8fa6b8db1 100644
--- a/media/gpu/v4l2/v4l2_video_decoder.cc
+++ b/media/gpu/v4l2/v4l2_video_decoder.cc
@@ -443,6 +443,7 @@ V4L2Status V4L2VideoDecoder::InitializeBackend() {
              << " and fourcc: " << FourccToString(input_format_fourcc_);
     backend_ = std::make_unique<V4L2StatefulVideoDecoderBackend>(
         this, device_, profile_, color_space_, decoder_task_runner_);
+#if BUILDFLAG(IS_CHROMEOS)
   } else {
     DCHECK_EQ(preferred_api_and_format.first, kStateless);
     VLOGF(1) << "Using a stateless API for profile: "
@@ -450,6 +451,7 @@ V4L2Status V4L2VideoDecoder::InitializeBackend() {
              << " and fourcc: " << FourccToString(input_format_fourcc_);
     backend_ = std::make_unique<V4L2StatelessVideoDecoderBackend>(
         this, device_, profile_, color_space_, decoder_task_runner_);
+#endif
   }
 
   if (!backend_->Initialize()) {
diff --git a/media/gpu/v4l2/v4l2_video_decoder_backend_stateful.cc b/media/gpu/v4l2/v4l2_video_decoder_backend_stateful.cc
index bf61cad80..553d1698a 100644
--- a/media/gpu/v4l2/v4l2_video_decoder_backend_stateful.cc
+++ b/media/gpu/v4l2/v4l2_video_decoder_backend_stateful.cc
@@ -758,6 +758,7 @@ bool V4L2StatefulVideoDecoderBackend::IsSupportedProfile(
   DCHECK(device_);
   if (supported_profiles_.empty()) {
     const std::vector<uint32_t> kSupportedInputFourccs = {
+      V4L2_PIX_FMT_AV1,
       V4L2_PIX_FMT_H264,
 #if BUILDFLAG(ENABLE_HEVC_PARSER_AND_HW_DECODER)
       V4L2_PIX_FMT_HEVC,
diff --git a/media/mojo/services/gpu_mojo_media_client_linux.cc b/media/mojo/services/gpu_mojo_media_client_linux.cc
index 197e369f8..3602989e0 100644
--- a/media/mojo/services/gpu_mojo_media_client_linux.cc
+++ b/media/mojo/services/gpu_mojo_media_client_linux.cc
@@ -28,7 +28,11 @@ VideoDecoderType GetPreferredLinuxDecoderImplementation() {
     return VideoDecoderType::kOutOfProcess;
   }
 
+#if BUILDFLAG(USE_V4L2_CODEC)
+  return VideoDecoderType::kV4L2;
+#else
   return VideoDecoderType::kVaapi;
+#endif
 }
 
 std::vector<Fourcc> GetPreferredRenderableFourccs(
@@ -41,6 +45,10 @@ std::vector<Fourcc> GetPreferredRenderableFourccs(
   }
 #endif  // BUILDFLAG(ENABLE_VULKAN)
 
+  // HACK: Support for zero-copy NV12 textures preferentially.
+  if (gpu_preferences.gr_context_type == gpu::GrContextType::kGL)
+    renderable_fourccs.emplace_back(Fourcc::NV12);
+
   // Support 1-copy argb textures.
   renderable_fourccs.emplace_back(Fourcc::AR24);
 
@@ -56,6 +64,8 @@ VideoDecoderType GetActualPlatformDecoderImplementation(
       return VideoDecoderType::kUnknown;
     case VideoDecoderType::kOutOfProcess:
       return VideoDecoderType::kOutOfProcess;
+    case VideoDecoderType::kV4L2:
+      return VideoDecoderType::kV4L2;
     case VideoDecoderType::kVaapi: {
       // Allow VaapiVideoDecoder on GL.
       if (gpu_preferences.gr_context_type == gpu::GrContextType::kGL) {
-- 
2.38.5

